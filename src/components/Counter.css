/* feature: visual */

.sheet-component--counter {
    position: relative;
    display: flex;

    & input {
        all: unset;
        appearance: none;
        height: 100%;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        font-size: calc(var(--v20-counter-item-width) - 2px);
        pointer-events: all;
        text-align: center;

        &, &:active, &:focus {
            outline: none;
        }
    }

    & input::before {
        content: '⚫';
        width: var(--v20-counter-item-width);
    }

    &.sheet-component--counter-style-box {
        & input {
            width: calc(var(--v20-counter-item-width) - 2px);
            height: calc(var(--v20-counter-item-width) - 2px);
            box-sizing: border-box;
            margin: 0 1px;
            border: solid var(--v20-border-width) var(--v20-common-border-color);
            background: transparent;
            box-shadow: 0 0 5px rgba(128, 128, 128, .1) inset;
        }

        &:not(:hover) input {
            border-color: var(--v20-common-border-color-transparent);
        }

        & input::before {
            content: 'X';
        }

        & input[value="0"] {
            border-radius: 50px;
        }

        & input:checked ~ input::before {
            content: ' ';
        }
    }

    &:not(:hover) input[value="0"] {
        opacity: 0;
        transition: opacity var(--v20-transition-duration);
    }

    & .sheet-component--counter-value {
        width: var(--v20-counter-item-width);
        flex: 0 0 var(--v20-counter-item-width);
        margin-left: calc(var(--v20-counter-item-width) * -1);
        height: 100%;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        font-size: calc(var(--v20-counter-item-width) - 2px);
        pointer-events: none;
        text-align: center;
    }
    &:hover input[value="0"] + .sheet-component--counter-value,
    & input[value="0"]:checked + .sheet-component--counter-value {
        opacity: 0;
    }

    &.sheet-component--counter-preserve-zero-gap:not(:has(input[value="0"])) {
        padding-left: 14px; /*compensating missing X*/
    }

    & input[value="0"]::before {
        content: "X";
    }

    & input[value="0"]:checked {
        opacity: 1;
    }
    &:hover input[value="0"]:not(:checked) {
        opacity: .5;
    }

    &:not(:hover) input[value="0"]:checked ~ input {
        opacity: .1;
    }

    & input[value="0"]:hover {
        opacity: 1;
    }

    &.sheet-component--counter-fade {
        &:hover input {
            opacity: .85;
        }
        &:hover input:hover,
        &:not(:hover) input:checked {
            opacity: 1;

            & ~ input {
                opacity: 0.75;
            }

            & ~ input ~ input ~ input {
                opacity: .5625;
            }

            & ~ input ~ input ~ input ~ input {
                opacity: .4218;
            }

            & ~ input ~ input ~ input ~ input ~ input {
                opacity: .3164;
            }

            & ~ input ~ input ~ input ~ input ~ input ~ input {
                opacity: .2373;
            }

            & ~ input ~ input ~ input ~ input ~ input ~ input ~ input {
                opacity: .1779;
            }

            & ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input {
                opacity: .1334;
            }

            & ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input {
                opacity: .1;
            }

            & ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input ~ input {
                opacity: .1;
            }
        }

        &:not(:hover):has(input:checked[value="0"]) {
            & input:not(:checked) {
                opacity: .1;
            }
        }
    }

    &:not(.sheet-component--counter-style-box) input:checked ~ input::before {
        content: '⚪';
    }

    .sheet-darkmode &:not(.sheet-component--counter-style-box) input:checked ~ input {
        filter: brightness(.5);
    }


    & input {
        transition: opacity var(--v20-transition-duration);
    }
}
